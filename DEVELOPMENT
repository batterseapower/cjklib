Introduction
------------
Short documentation about steps helping in development.

nosetest from http://somethingaboutorange.com/mrl/projects/nose is used in
the following paragraphs.

Test cases
------------
Run
  nosetests cjklib/test/*.py
or to ommit current slow tests:
  nosetests cjklib/test/*.py -e testDecomposeKeepsSyllablePairs
    -e CompositionIsStrict -e testGetCharactersForReadingAcceptsAllEntities
to use the test cases included in cjklib/test/.

Coverage
------------
Run
  nosetests cjklib/test/* --with-coverage --cover-package=cjklib
    --cover-html --cover-html-dir=coverage

HTML files showing the source code's coverage can then be accessed from
coverage/index.html.

Profiling
------------
Profiling is mostly used to learn about the runtime behaviour of a program
and find inefficient parts of the code. It also allows epydoc to generate call
graphs for inclusion in the API documentation:
  python -m profile -o unittest.pstat /usr/bin/nosetests cjklib/test/*.py

generates the file unittest.pstat that is used for further processing.

Profiling offered by nosetest seems not to work together with epydoc:
  nosetests cjklib/test/* --with-profile --profile-stats-file=unittest.pstat

Documentation
------------
Epydoc is used to generate the API documentation:
  epydoc -v --config epydoc_config
