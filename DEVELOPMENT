Introduction
------------
Short documentation about steps helping in development.

Path
----
Make sure you always use the newest version of cjklib by appending the
following lines to your ~/.bashrc:

cjklibroot=/home/christoph/dokumente/projekte/cjklib/trunk
export PYTHONPATH=$PYTHONPATH:$cjklibroot

Additional software
-------------------
* epydoc from http://epydoc.sourceforge.net is used to generate the API
  documentation.
* nosetests from http://somethingaboutorange.com/mrl/projects/nose is used
  for unit testing.
* pylint from http://www.logilab.org/857, a tool tool that checks if a
  module satisfies the Python coding standard and can find simple
  programming errors. Use the config pylintrc to adapt pylint to settings of
  cjklib.

Test cases
------------
Run
  nosetests cjklib/test/*.py
or to ommit current slow tests:
  nosetests cjklib/test/*.py -e testDecomposeKeepsSyllablePairs
    -e testGetCharactersForReadingAcceptsAllEntities
to use the test cases included in cjklib/test/.

To test the build methods you need to download external files first:
  cd test
  python download.py
Currently only SQLite in-memory database testing is enabled. You might want
to enable MySQL, see cjklib/test/build.py for details.

To check documentation included in doc strings ("doctest"), on BASH do:
  nosetests --with-doctest cjklib.characterlookup cjklib.reading
    cjklib.reading.operator cjklib.reading.converter

You need to patch doctest.py as it is currently not capable of reporting
strings in Unicode: http://bugs.python.org/issue1293741. Another bug will
lead to results in Unicode being reported as wrong:
http://bugs.python.org/issue3955.

Coverage
------------
Run
  nosetests cjklib/test/* --with-coverage --cover-package=cjklib
    --cover-html --cover-html-dir=coverage

HTML files showing the source code's coverage can then be accessed from
coverage/index.html.

Profiling
------------
Profiling is mostly used to learn about the runtime behaviour of a program
and find inefficient parts of the code. It also allows epydoc to generate call
graphs for inclusion in the API documentation:
  python -m profile -o unittest.pstat /usr/bin/nosetests cjklib/test/*.py

generates the file unittest.pstat that is used for further processing.

Profiling offered by nosetest seems not to work together with epydoc:
  nosetests cjklib/test/* --with-profile --profile-stats-file=unittest.pstat

Documentation
------------
Epydoc is used to generate the API documentation:
  epydoc -v --config epydoc_config

Source code checking
------------
pylint can be used to check for bugs and code with poor quality:
  pylint --rcfile=pylintrc cjklib
While some useless warnings and errors are already surpressed, others might
crop up. Use your own judging on evaluation.
